# SpecialWash Backend (solo Admin + Stock) — Panel web + Fix tests + setup.sh

Este repo incluye un `setup.sh` que genera **toda** la estructura (API + panel web HTML) y corrige el error de tests `ModuleNotFoundError: backend` con un `tests/conftest.py`.

---

## setup.sh (actualizado)
```bash

#!/bin/bash
set -e

# Crear directorios
mkdir -p backend tests .devcontainer templates static

# __init__.py
: > backend/__init__.py

# db.py
cat > backend/db.py <<'EOPY'
from flask_sqlalchemy import SQLAlchemy

db = SQLAlchemy()
EOPY

# config.py
cat > backend/config.py <<'EOPY'
import os
from datetime import timedelta

def _normalize_db_url(url: str) -> str:
    if url.startswith("postgres://"):
        return url.replace("postgres://", "postgresql+psycopg2://", 1)
    return url

class Config:
    SQLALCHEMY_DATABASE_URI = _normalize_db_url(os.getenv("DATABASE_URL", "sqlite:///specialwash.db"))
    SQLALCHEMY_TRACK_MODIFICATIONS = False

    SECRET_KEY = os.getenv("SECRET_KEY", "dev-secret")
    JWT_SECRET_KEY = os.getenv("JWT_SECRET_KEY", "dev-jwt-secret")
    JWT_ACCESS_TOKEN_EXPIRES = timedelta(hours=12)

    CORS_ORIGINS = os.getenv("CORS_ORIGINS", "*")

def get_config():
    return Config
EOPY

# models.py
cat > backend/models.py <<'EOPY'
from .db import db
from werkzeug.security import generate_password_hash, check_password_hash
from datetime import datetime

class User(db.Model):
    __tablename__ = "user"

    id = db.Column(db.Integer, primary_key=True)
    email = db.Column(db.String(120), unique=True, nullable=False)
    password_hash = db.Column(db.String(255), nullable=False)
    role = db.Column(db.String(50), nullable=False, default="admin")
    created_at = db.Column(db.DateTime, default=datetime.utcnow)

    def set_password(self, password: str):
        self.password_hash = generate_password_hash(password)

    def check_password(self, password: str) -> bool:
        return check_password_hash(self.password_hash, password)

class Producto(db.Model):
    __tablename__ = "producto"

    id = db.Column(db.Integer, primary_key=True)
    nombre = db.Column(db.String(120), nullable=False, unique=True)
    detalle = db.Column(db.String(255))
    categoria = db.Column(db.String(80))
    stock_minimo = db.Column(db.Integer, nullable=False, default=0)
    stock_actual = db.Column(db.Integer, nullable=False, default=0)
    activo = db.Column(db.Boolean, default=True)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)

class RegistroEntrada(db.Model):
    __tablename__ = "registro_entrada"

    id = db.Column(db.Integer, primary_key=True)
    producto_id = db.Column(db.Integer, db.ForeignKey('producto.id'), nullable=False)
    cantidad = db.Column(db.Integer, nullable=False)
    fecha = db.Column(db.DateTime, default=datetime.utcnow)
    observaciones = db.Column(db.String(255))
    usuario_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)

    producto = db.relationship('Producto', backref='entradas')
    usuario = db.relationship('User')

class RegistroSalida(db.Model):
    __tablename__ = "registro_salida"

    id = db.Column(db.Integer, primary_key=True)
    producto_id = db.Column(db.Integer, db.ForeignKey('producto.id'), nullable=False)
    cantidad = db.Column(db.Integer, nullable=False)
    fecha = db.Column(db.DateTime, default=datetime.utcnow)
    observaciones = db.Column(db.String(255))
    usuario_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)

    producto = db.relationship('Producto', backref='salidas')
    usuario = db.relationship('User')
EOPY

# utils.py
cat > backend/utils.py <<'EOPY'
from flask_jwt_extended import verify_jwt_in_request, get_jwt
from functools import wraps
from flask import jsonify, session, redirect, url_for

def admin_required(fn):
    @wraps(fn)
    def wrapper(*args, **kwargs):
        verify_jwt_in_request()
        claims = get_jwt()
        role = claims.get("role")
        if role != "admin":
            return jsonify({"msg": "Solo admin puede acceder"}), 403
        return fn(*args, **kwargs)
    return wrapper

# Autenticación sencilla para el panel (sesión)
def panel_required(fn):
    @wraps(fn)
    def wrapper(*args, **kwargs):
        if not session.get("panel_user_id"):
            return redirect(url_for("panel.login_panel"))
        return fn(*args, **kwargs)
    return wrapper
EOPY

# routes.py (API JSON)
cat > backend/routes.py <<'EOPY'
from flask import Blueprint, request, jsonify
from flask_jwt_extended import create_access_token, get_jwt_identity
from sqlalchemy import func
import os

from .db import db
from .models import User, Producto, RegistroEntrada, RegistroSalida
from .utils import admin_required

api_bp = Blueprint('api', __name__)

@api_bp.get("/")
def api_root():
    return jsonify({"service": "specialwash-backend", "api": "/api", "ok": True})

# Auth
@api_bp.post("/auth/seed-admin")
def seed_admin():
    existing = db.session.scalar(db.select(func.count()).select_from(User))
    if existing and existing > 0:
        return jsonify({"created": False, "reason": "Ya existe un usuario. Usa /auth/login."}), 400

    email = os.getenv("ADMIN_EMAIL", "admin@specialwash.local").strip().lower()
    password = os.getenv("ADMIN_PASSWORD", "admin12345")

    u = User(email=email, role="admin")
    u.set_password(password)
    db.session.add(u)
    db.session.commit()

    return jsonify({"created": True, "email": email})

@api_bp.get("/auth/admin-exists")
def admin_exists():
    count = db.session.scalar(db.select(func.count()).select_from(User))
    return jsonify({"admin_exists": count > 0})

@api_bp.post("/auth/login")
def login():
    data = request.get_json() or {}
    email = (data.get("email") or "").strip().lower()
    password = data.get("password") or ""

    user = db.session.scalar(db.select(User).where(User.email == email))
    if not user or not user.check_password(password):
        return jsonify({"msg": "Email o contraseña incorrectos"}), 401

    access_token = create_access_token(
        identity=str(user.id),
        additional_claims={"role": user.role, "email": user.email}
    )
    return jsonify({"access_token": access_token, "role": user.role, "email": user.email})

# Productos
@api_bp.post("/productos")
@admin_required
def crear_producto():
    data = request.get_json() or {}
    nombre = (data.get("nombre") or "").strip()
    if not nombre:
        return jsonify({"msg": "nombre es obligatorio"}), 400

    if db.session.scalar(db.select(Producto).where(Producto.nombre == nombre)):
        return jsonify({"msg": "Ya existe un producto con ese nombre"}), 409

    p = Producto(
        nombre=nombre,
        detalle=data.get("detalle"),
        categoria=data.get("categoria"),
        stock_minimo=int(data.get("stock_minimo") or 0),
        stock_actual=int(data.get("stock_actual") or 0),
        activo=True,
    )
    db.session.add(p)
    db.session.commit()
    return jsonify({"msg": "Producto creado", "producto": serialize_producto(p)}), 201

@api_bp.get("/productos")
@admin_required
def listar_productos():
    productos = db.session.scalars(db.select(Producto).order_by(Producto.nombre)).all()
    return jsonify([serialize_producto(p) for p in productos])

@api_bp.put("/productos/<int:pid>")
@admin_required
def editar_producto(pid):
    p = db.session.get(Producto, pid)
    if not p:
        return jsonify({"msg": "Producto no encontrado"}), 404

    data = request.get_json() or {}

    if "nombre" in data:
        nombre = (data["nombre"] or "").strip()
        if not nombre:
            return jsonify({"msg": "nombre no puede estar vacío"}), 400
        if nombre != p.nombre and db.session.scalar(db.select(Producto).where(Producto.nombre == nombre)):
            return jsonify({"msg": "Ya existe otro producto con ese nombre"}), 409
        p.nombre = nombre

    for field in ["detalle", "categoria"]:
        if field in data:
            setattr(p, field, data[field])

    if "stock_minimo" in data:
        p.stock_minimo = int(data["stock_minimo"] or 0)

    if "activo" in data:
        p.activo = bool(data["activo"])

    db.session.commit()
    return jsonify({"msg": "Producto actualizado", "producto": serialize_producto(p)})

@api_bp.delete("/productos/<int:pid>")
@admin_required
def eliminar_producto(pid):
    p = db.session.get(Producto, pid)
    if not p:
        return jsonify({"msg": "Producto no encontrado"}), 404
    db.session.delete(p)
    db.session.commit()
    return jsonify({"msg": "Producto eliminado"})


def serialize_producto(p: Producto):
    return {
        "id": p.id,
        "nombre": p.nombre,
        "detalle": p.detalle,
        "categoria": p.categoria,
        "stock_minimo": p.stock_minimo,
        "stock_actual": p.stock_actual,
        "activo": p.activo,
        "alerta_bajo_stock": p.stock_actual <= p.stock_minimo if p.activo else False,
    }

# Stock
@api_bp.post("/stock/entrada")
@admin_required
def registrar_entrada():
    data = request.get_json() or {}
    producto_id = data.get("producto_id")
    cantidad = int(data.get("cantidad") or 0)
    if not producto_id or cantidad <= 0:
        return jsonify({"msg": "producto_id y cantidad (>0) son obligatorios"}), 400

    p = db.session.get(Producto, int(producto_id))
    if not p:
        return jsonify({"msg": "Producto no encontrado"}), 404

    user_id = _current_user_id()
    entrada = RegistroEntrada(
        producto_id=p.id,
        cantidad=cantidad,
        observaciones=data.get("observaciones"),
        usuario_id=user_id,
    )
    p.stock_actual += cantidad
    db.session.add(entrada)
    db.session.commit()
    return jsonify({"msg": "Entrada registrada", "producto": serialize_producto(p)}), 201

@api_bp.post("/stock/salida")
@admin_required
def registrar_salida():
    data = request.get_json() or {}
    producto_id = data.get("producto_id")
    cantidad = int(data.get("cantidad") or 0)
    if not producto_id or cantidad <= 0:
        return jsonify({"msg": "producto_id y cantidad (>0) son obligatorios"}), 400

    p = db.session.get(Producto, int(producto_id))
    if not p:
        return jsonify({"msg": "Producto no encontrado"}), 404

    if p.stock_actual - cantidad < 0:
        return jsonify({"msg": "No hay stock suficiente"}), 400

    user_id = _current_user_id()
    salida = RegistroSalida(
        producto_id=p.id,
        cantidad=cantidad,
        observaciones=data.get("observaciones"),
        usuario_id=user_id,
    )
    p.stock_actual -= cantidad
    db.session.add(salida)
    db.session.commit()
    return jsonify({"msg": "Salida registrada", "producto": serialize_producto(p)}), 201

@api_bp.get("/stock")
@admin_required
def ver_stock():
    productos = db.session.scalars(db.select(Producto).where(Producto.activo == True).order_by(Producto.nombre)).all()
    return jsonify([serialize_producto(p) for p in productos])

@api_bp.get("/stock/entradas")
@admin_required
def listar_entradas():
    desde = request.args.get("desde")
    hasta = request.args.get("hasta")
    query = db.select(RegistroEntrada).order_by(RegistroEntrada.fecha.desc())
    if desde:
        from datetime import datetime
        query = query.where(RegistroEntrada.fecha >= datetime.strptime(desde, "%Y-%m-%d"))
    if hasta:
        from datetime import datetime
        dt = datetime.strptime(hasta, "%Y-%m-%d").replace(hour=23, minute=59, second=59)
        query = query.where(RegistroEntrada.fecha <= dt)
    entradas = db.session.scalars(query).all()
    return jsonify([_serialize_mov_e(e) for e in entradas])

@api_bp.get("/stock/salidas")
@admin_required
def listar_salidas():
    desde = request.args.get("desde")
    hasta = request.args.get("hasta")
    query = db.select(RegistroSalida).order_by(RegistroSalida.fecha.desc())
    if desde:
        from datetime import datetime
        query = query.where(RegistroSalida.fecha >= datetime.strptime(desde, "%Y-%m-%d"))
    if hasta:
        from datetime import datetime
        dt = datetime.strptime(hasta, "%Y-%m-%d").replace(hour=23, minute=59, second=59)
        query = query.where(RegistroSalida.fecha <= dt)
    salidas = db.session.scalars(query).all()
    return jsonify([_serialize_mov_s(s) for s in salidas])

# Helpers
from flask_jwt_extended import get_jwt_identity

def _serialize_mov_e(e: RegistroEntrada):
    return {
        "id": e.id,
        "producto_id": e.producto_id,
        "producto": e.producto.nombre if e.producto else None,
        "cantidad": e.cantidad,
        "fecha": e.fecha.isoformat(),
        "usuario_id": e.usuario_id,
        "observaciones": e.observaciones,
    }

def _serialize_mov_s(s: RegistroSalida):
    return {
        "id": s.id,
        "producto_id": s.producto_id,
        "producto": s.producto.nombre if s.producto else None,
        "cantidad": s.cantidad,
        "fecha": s.fecha.isoformat(),
        "usuario_id": s.usuario_id,
        "observaciones": s.observaciones,
    }

def _current_user_id():
    identity = get_jwt_identity()
    try:
        return int(identity)
    except Exception:
        return int(identity) if identity else None
EOPY

# panel.py (Panel web con sesión y formularios)
cat > backend/panel.py <<'EOPY'
from flask import Blueprint, render_template, request, redirect, url_for, session, flash
from .db import db
from .models import User, Producto, RegistroEntrada, RegistroSalida
from werkzeug.security import check_password_hash

panel = Blueprint('panel', __name__)

@panel.get('/panel/login')
def login_panel():
    return render_template('panel_login.html')

@panel.post('/panel/login')
def do_login_panel():
    email = (request.form.get('email') or '').strip().lower()
    password = request.form.get('password') or ''
    user = db.session.scalar(db.select(User).where(User.email==email))
    if not user or not user.check_password(password):
        return render_template('panel_login.html', error='Credenciales inválidas')
    session['panel_user_id'] = user.id
    return redirect(url_for('panel.dashboard'))

@panel.get('/panel/logout')
def logout_panel():
    session.pop('panel_user_id', None)
    return redirect(url_for('panel.login_panel'))

@panel.get('/panel')
def dashboard():
    if not session.get('panel_user_id'):
        return redirect(url_for('panel.login_panel'))
    productos = db.session.scalars(db.select(Producto).order_by(Producto.nombre)).all()
    return render_template('panel_dashboard.html', productos=productos)

@panel.post('/panel/productos')
def crear_producto_panel():
    if not session.get('panel_user_id'):
        return redirect(url_for('panel.login_panel'))
    nombre = (request.form.get('nombre') or '').strip()
    stock_minimo = int(request.form.get('stock_minimo') or 0)
    detalle = request.form.get('detalle') or None
    categoria = request.form.get('categoria') or None

    if not nombre:
        flash('El nombre es obligatorio', 'danger')
        return redirect(url_for('panel.dashboard'))

    if db.session.scalar(db.select(Producto).where(Producto.nombre==nombre)):
        flash('Ya existe un producto con ese nombre', 'warning')
        return redirect(url_for('panel.dashboard'))

    p = Producto(nombre=nombre, stock_minimo=stock_minimo, detalle=detalle, categoria=categoria)
    db.session.add(p)
    db.session.commit()
    flash('Producto creado', 'success')
    return redirect(url_for('panel.dashboard'))

@panel.post('/panel/stock/entrada')
def entrada_panel():
    if not session.get('panel_user_id'):
        return redirect(url_for('panel.login_panel'))
    producto_id = int(request.form.get('producto_id'))
    cantidad = int(request.form.get('cantidad') or 0)
    obs = request.form.get('observaciones')
    p = db.session.get(Producto, producto_id)
    if not p or cantidad<=0:
        flash('Datos inválidos', 'danger')
        return redirect(url_for('panel.dashboard'))
    mov = RegistroEntrada(producto_id=producto_id, cantidad=cantidad, observaciones=obs, usuario_id=session['panel_user_id'])
    p.stock_actual += cantidad
    db.session.add(mov)
    db.session.commit()
    flash('Entrada registrada', 'success')
    return redirect(url_for('panel.dashboard'))

@panel.post('/panel/stock/salida')
def salida_panel():
    if not session.get('panel_user_id'):
        return redirect(url_for('panel.login_panel'))
    producto_id = int(request.form.get('producto_id'))
    cantidad = int(request.form.get('cantidad') or 0)
    obs = request.form.get('observaciones')
    p = db.session.get(Producto, producto_id)
    if not p or cantidad<=0 or p.stock_actual < cantidad:
        flash('Datos inválidos o stock insuficiente', 'danger')
        return redirect(url_for('panel.dashboard'))
    mov = RegistroSalida(producto_id=producto_id, cantidad=cantidad, observaciones=obs, usuario_id=session['panel_user_id'])
    p.stock_actual -= cantidad
    db.session.add(mov)
    db.session.commit()
    flash('Salida registrada', 'success')
    return redirect(url_for('panel.dashboard'))
EOPY

# app.py
cat > backend/app.py <<'EOPY'
from flask import Flask, jsonify, request
from flask_cors import CORS
from flask_jwt_extended import JWTManager
from flask_migrate import Migrate
from dotenv import load_dotenv

from .config import get_config
from .db import db
from .routes import api_bp
from .panel import panel

load_dotenv()

def create_app():
    app = Flask(__name__)
    app.config.from_object(get_config())
    app.config['TEMPLATES_AUTO_RELOAD'] = True

    CORS(app, resources={r"/api/*": {"origins": app.config.get("CORS_ORIGINS", "*")}})
    db.init_app(app)
    Migrate(app, db)
    JWTManager(app)

    app.register_blueprint(api_bp, url_prefix="/api")
    app.register_blueprint(panel)

    @app.get("/")
    def root():
        return {"service": "specialwash-backend", "api": "/api", "ok": True}

    @app.get("/health")
    def health():
        return {"status": "ok"}

    @app.errorhandler(404)
    def not_found(e):
        if request.accept_mimetypes.accept_json or request.path.startswith("/api"):
            from flask import jsonify
            return jsonify({"error": "Not Found", "path": request.path}), 404
        return e

    @app.errorhandler(405)
    def method_not_allowed(e):
        if request.accept_mimetypes.accept_json or request.path.startswith("/api"):
            from flask import jsonify
            return jsonify({"error": "Method Not Allowed", "path": request.path}), 405
        return e

    with app.app_context():
        db.create_all()

    return app

app = create_app()

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=5000, debug=True)
EOPY

# wsgi.py
cat > backend/wsgi.py <<'EOPY'
from .app import app
EOPY

# requirements.txt
cat > backend/requirements.txt <<'EOPY'
Flask==3.0.3
Flask-JWT-Extended==4.6.0
Flask-SQLAlchemy==3.1.1
Flask-Migrate==4.0.7
Flask-Cors==4.0.0
SQLAlchemy==2.0.32
python-dotenv==1.0.1
psycopg2-binary==2.9.9
PyMySQL==1.1.1
gunicorn==21.2.0
pytest==8.3.2
EOPY

# Copiar requirements a raíz
cp backend/requirements.txt requirements.txt

# tests/test_api.py
cat > tests/test_api.py <<'EOPY'
import os
import tempfile
import pytest

from backend.app import create_app
from backend.db import db

@pytest.fixture()
def app():
    db_fd, db_path = tempfile.mkstemp()
    os.environ["DATABASE_URL"] = f"sqlite:///{db_path}"
    os.environ["SECRET_KEY"] = "test-secret"
    os.environ["JWT_SECRET_KEY"] = "test-jwt"
    os.environ["ADMIN_EMAIL"] = "admin@test.local"
    os.environ["ADMIN_PASSWORD"] = "admin123"

    app = create_app()
    app.testing = True

    with app.app_context():
        db.create_all()

    yield app

    os.close(db_fd)
    os.remove(db_path)

@pytest.fixture()
def client(app):
    return app.test_client()

def test_root_json(client):
    r = client.get("/")
    assert r.status_code == 200
    j = r.get_json()
    assert j["service"] == "specialwash-backend"
    assert j["api"] == "/api"
    assert j["ok"] is True

def test_api_root_json(client):
    r = client.get("/api/")
    assert r.status_code == 200
    j = r.get_json()
    assert j["service"] == "specialwash-backend"
    assert j["api"] == "/api"
    assert j["ok"] is True

def test_health(client):
    r = client.get("/health")
    assert r.status_code == 200
    assert r.get_json() == {"status": "ok"}

def test_seed_admin_and_login(client):
    r = client.get("/api/auth/admin-exists")
    assert r.status_code == 200
    assert r.get_json()["admin_exists"] is False

    r = client.post("/api/auth/seed-admin")
    assert r.status_code == 200
    assert r.get_json()["created"] is True

    r = client.post("/api/auth/seed-admin")
    assert r.status_code == 400

    r = client.post("/api/auth/login", json={"email": "admin@test.local", "password": "admin123"})
    assert r.status_code == 200
    token = r.get_json()["access_token"]
    assert token

    r = client.get("/api/productos", headers={"Authorization": f"Bearer {token}"})
    assert r.status_code == 200
    assert r.get_json() == []

def test_crud_productos_y_stock(client):
    client.post("/api/auth/seed-admin")
    login = client.post("/api/auth/login", json={"email": os.environ["ADMIN_EMAIL"], "password": os.environ["ADMIN_PASSWORD"]})
    token = login.get_json()["access_token"]
    H = {"Authorization": f"Bearer {token}"}

    r = client.post("/api/productos", headers=H, json={"nombre": "Champu", "stock_minimo": 5})
    assert r.status_code == 201
    prod = r.get_json()["producto"]
    pid = prod["id"]
    assert prod["stock_actual"] == 0

    r = client.post("/api/stock/entrada", headers=H, json={"producto_id": pid, "cantidad": 10, "observaciones": "Compra"})
    assert r.status_code == 201
    assert r.get_json()["producto"]["stock_actual"] == 10

    r = client.post("/api/stock/salida", headers=H, json={"producto_id": pid, "cantidad": 3, "observaciones": "Uso"})
    assert r.status_code == 201
    assert r.get_json()["producto"]["stock_actual"] == 7

    r = client.post("/api/stock/salida", headers=H, json={"producto_id": pid, "cantidad": 999})
    assert r.status_code == 400

    r = client.get("/api/stock/entradas", headers=H)
    assert r.status_code == 200
    assert len(r.get_json()) >= 1

    r = client.get("/api/stock/salidas", headers=H)
    assert r.status_code == 200
    assert len(r.get_json()) >= 1
EOPY

# tests/conftest.py — corrige PATH para importar 'backend'
cat > tests/conftest.py <<'EOPY'
import sys, os
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))
EOPY

# devcontainer.json
cat > .devcontainer/devcontainer.json <<'EOPY'
{
  "name": "SpecialWash Backend",
  "image": "mcr.microsoft.com/devcontainers/python:3.11",
  "postCreateCommand": "pip install -r requirements.txt",
  "customizations": {
    "vscode": {
      "extensions": [
        "ms-python.python",
        "ms-python.vscode-pylance"
      ]
    }
  },
  "forwardPorts": [5000]
}
EOPY

# .env.example
cat > .env.example <<'EOPY'
FLASK_ENV=development
SECRET_KEY=pon-algo-seguro
JWT_SECRET_KEY=pon-otro-seguro
DATABASE_URL=sqlite:///specialwash.db
CORS_ORIGINS=http://localhost:3000,https://*.github.dev
ADMIN_EMAIL=admin@specialwash.local
ADMIN_PASSWORD=admin12345
EOPY

# .gitignore
cat > .gitignore <<'EOPY'
__pycache__/
*.py[cod]
.env
.env.*
.venv/
venv/
instance/
*.sqlite3
specialwash.db
.pytest_cache/
.mypy_cache/
EOPY

# Templates (Bootstrap 5)
cat > templates/panel_base.html <<'EOPY'
<!doctype html>
<html lang="es">
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>SpecialWash · Panel</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body class="bg-light">
<nav class="navbar navbar-dark bg-dark mb-4">
  <div class="container-fluid">
    <span class="navbar-brand">SpecialWash · Panel</span>
    <div>
      <a href="/panel" class="btn btn-outline-light btn-sm me-2">Dashboard</a>
      <a href="/panel/logout" class="btn btn-warning btn-sm">Salir</a>
    </div>
  </div>
</nav>
<div class="container">{% with messages = get_flashed_messages(with_categories=true) %}
  {% if messages %}
    {% for cat, msg in messages %}
      <div class="alert alert-{{cat}}">{{msg}}</div>
    {% endfor %}
  {% endif %}
{% endwith %}
  {% block content %}{% endblock %}
</div>
</body>
</html>
EOPY

cat > templates/panel_login.html <<'EOPY'
<!doctype html>
<html lang="es">
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Login · SpecialWash</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body class="bg-light d-flex align-items-center" style="min-height:100vh;">
  <div class="container">
    <div class="row justify-content-center">
      <div class="col-md-4">
        <div class="card shadow">
          <div class="card-body">
            <h1 class="h4 mb-3">Acceso panel</h1>
            {% if error %}<div class="alert alert-danger">{{error}}</div>{% endif %}
            <form method="post" action="/panel/login">
              <div class="mb-3">
                <label class="form-label">Email</label>
                <input type="email" name="email" class="form-control" required>
              </div>
              <div class="mb-3">
                <label class="form-label">Contraseña</label>
                <input type="password" name="password" class="form-control" required>
              </div>
              <button class="btn btn-dark w-100">Entrar</button>
            </form>
          </div>
        </div>
      </div>
    </div>
  </div>
</body>
</html>
EOPY

cat > templates/panel_dashboard.html <<'EOPY'
{% extends 'panel_base.html' %}
{% block content %}
<div class="row g-4">
  <div class="col-md-4">
    <div class="card shadow-sm">
      <div class="card-body">
        <h2 class="h5">Crear producto</h2>
        <form method="post" action="/panel/productos">
          <div class="mb-2">
            <label class="form-label">Nombre</label>
            <input name="nombre" class="form-control" required>
          </div>
          <div class="mb-2">
            <label class="form-label">Stock mínimo</label>
            <input type="number" name="stock_minimo" class="form-control" value="0" min="0">
          </div>
          <div class="mb-2">
            <label class="form-label">Categoría</label>
            <input name="categoria" class="form-control">
          </div>
          <div class="mb-3">
            <label class="form-label">Detalle</label>
            <input name="detalle" class="form-control">
          </div>
          <button class="btn btn-dark w-100">Crear</button>
        </form>
      </div>
    </div>
  </div>

  <div class="col-md-8">
    <div class="card shadow-sm">
      <div class="card-body">
        <h2 class="h5">Stock</h2>
        <table class="table table-sm align-middle">
          <thead>
            <tr>
              <th>ID</th><th>Producto</th><th>Stock</th><th>Mín.</th><th>Acciones</th>
            </tr>
          </thead>
          <tbody>
            {% for p in productos %}
            <tr>
              <td>{{p.id}}</td>
              <td>{{p.nombre}}</td>
              <td>{{p.stock_actual}}</td>
              <td>{{p.stock_minimo}}</td>
              <td>
                <form class="d-inline" method="post" action="/panel/stock/entrada">
                  <input type="hidden" name="producto_id" value="{{p.id}}">
                  <input type="number" class="form-control d-inline w-auto" name="cantidad" min="1" value="1">
                  <input type="text" class="form-control d-inline w-auto" name="observaciones" placeholder="Obs">
                  <button class="btn btn-success btn-sm">Entrada</button>
                </form>
                <form class="d-inline ms-1" method="post" action="/panel/stock/salida">
                  <input type="hidden" name="producto_id" value="{{p.id}}">
                  <input type="number" class="form-control d-inline w-auto" name="cantidad" min="1" value="1">
                  <input type="text" class="form-control d-inline w-auto" name="observaciones" placeholder="Obs">
                  <button class="btn btn-danger btn-sm">Salida</button>
                </form>
              </td>
            </tr>
            {% endfor %}
          </tbody>
        </table>
      </div>
    </div>
  </div>
</div>
{% endblock %}
EOPY

# Mensaje final
echo "✅ Proyecto creado/actualizado."
echo "Siguiente:" && echo "  pip install -r requirements.txt" && echo "  python -m backend.app"
```

---

## ¿Cómo verlo en pantalla?
1. Ejecuta:
```bash
chmod +x setup.sh
./setup.sh
pip install -r requirements.txt
python -m backend.app
```
2. Abre el navegador en **`http://localhost:5000/panel/login`**.
   - Usuario: `admin@specialwash.local`
   - Contraseña: `admin12345` (o la que pusiste en `.env` y sembraste con `/api/auth/seed-admin`)
3. Te llevará al **Panel** con:
   - Formulario para **crear productos**.
   - Tabla de **stock** con botones para **Entrada** y **Salida**.

---

## Fix de tests (`ModuleNotFoundError: backend`)
- Ya incluí `tests/conftest.py` que añade el proyecto al `sys.path`.
- Ejecuta los tests así:
```bash
pytest
```
Si quisieras ejecutarlo sin ese `conftest.py`, otra alternativa es:
```bash
PYTHONPATH=. pytest
```
